official documentation : https://docs.docker.com/compose/reference/
------------------------------------------------------------------------------------------

Docker-compose is a tool that combines and runs multiple containers of interrelated services with a single command. 
It is a tool to define all the application dependencies in one place and let the Docker take care of running 
all of those services in just one simple command docker-compose up.
----------------------------------------------------------------------------------------

The Compose file is in YAML format.
https://yamlchecker.com/ validation app online

version ‘3’: Like other software, docker-compose also started with version 1.0. 
At the time of writing this course, the current latest version of Compose file is 3.7.
We have specified the version of Compose file we will be using and Docker will provide the features accordingly.
Compose versions are backward compatible, hence it is recommended to use the latest version.

services: The services section defines all the docker images required and need to be built for the application to work. 
In short, it’s the collection of all different components of the application that are dependent on each other.
We have two services namely, web and database. In Compose version 3, we can have multiple containers of the same service as well.

web: The name web is the name of our Flask app service. It can be anything. 
Docker Compose will create containers with this name.

build: This clause specifies the Dockerfile location. ‘.’ represents the current directory where the docker-compose.yml 
file is located and Dockerfile is used to build an image and run the container from it. We can also provide the absolute path 
to Dockerfile instead of the current working directory symbol.

ports: The ports clause is used to map the container ports to the host machine’s port. It creates a tunnel from the 
specified container port to the provided host machine’s port.
This is the same as using the -p 5000:5000 option to map the container’s 5000 port to the host machine’s 
5000 port while running the container using the docker run command.

volumes: This is the same as the -v option used to mount disks in docker run command. Here, we are attaching our code 
files directory to the container’s /code directory so that we don’t have to rebuild the images for every change in the files.
This will also help in auto-reloading the server when running in debug mode.

links: Links literally link one service to another. In the bridge network, we have to specify which container should be accessible 
to what container using a link to the respective containers.
Here, we are linking the database container to the web container, so that our web container can reach the database in the bridge network. 
Links are a legacy way of connecting services and are deprecated. You will learn the alternative to links (that is networks) in upcoming lessons.

image: If we don’t have a Dockerfile and want to run a service directly using an already built docker image, then specify the image 
location using the ‘image’ clause. Compose will pull the image and fork a container from it.

environment: Any environment variable that should be present in the container can be created using the environment 
clause. This does the same work as the -e argument in the docker run command while running a container.

depends_on: This is used to inform docker-compose about all the dependencies of a service. 
Docker-compose will then start dependencies first and the main service after.
------------------------------------------------------------------------------------
basic commands : 

docker-compose --help 

docker-compose build    
//will build images from its dockerfile, if image linked and not dockerfile, process skipped

docker-compose images
//lists the images build

docker-compose run
//build containers from the images(have to be images, would not build from dockerfile)

docker-compose up
//builds and runs the containers and their dependencies

'' --build
//switch force builds a new image, even if image already exsists

docker-compose stop 
//stops all the containers mentioned in the compose file

docker-compose start 
//starts any stopped containers 

docker-compose restart
//does exactly what it says, restarts all of the containers

docker-compose ps   
//This lists all the containers for services mentioned in the current docker-compose file. 
//The containers can either be running or stopped.

docker-compose down 
//stops and deletes

docker system prune 
//stops, cleans up the containers, networks, and images used

docker-compose logs
//prints logs of all containers and services involved


=====================================================================================================

How to deal with environmental variables : 
they shouldnt be mentioned with the code. And should not be written into the docker compose file either 

There are multiple ways we can use the environment variables in Docker, which includes,

    ENV in Dockerfile
    environment keyword in the docker-compose.yml file
    -e option from the command line

So, docker-compose has precedence levels to overcome the clash of variables. Let’s see those.

When you set the same environment variable in multiple files, here’s the priority used by Compose to choose which value to use:

    Compose file
    Shell environment variables
    Environment file
    Dockerfile
    Variable is not defined
